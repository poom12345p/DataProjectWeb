/// <reference types="node" />
import { FieldInfo } from 'mysql';
export declare type QueryParams = StringMap | any[];
export interface Field {
    type: string;
    length: number;
    buffer: () => Buffer;
    string: () => string;
    geometry: () => any;
}
declare type SqlType = number | Date | Buffer | string | boolean | null;
export interface Dict {
    [_: string]: SqlType;
}
export interface StringMap {
    [_: string]: any;
}
export interface TextRow {
    [_: string]: any;
}
export interface AnyObject {
    [_: string]: any;
    [_: number]: any;
}
export declare type QueryResult = [any[], FieldInfo[]];
export declare type ResultPromise = Promise<QueryResult>;
export declare type TupleTypes<T> = {
    [P in keyof T]: T[P];
} extends {
    [key: number]: infer V;
} ? V : never;
export declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;
export interface ResultSetHeader {
    fieldCount: number;
    affectedRows: number;
    insertId: number;
    info: string;
    serverStatus: number;
    warningStatus: number;
}
export {};
