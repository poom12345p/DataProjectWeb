{"version":3,"file":"formatSql.js","sourceRoot":"","sources":["../src/formatSql.ts"],"names":[],"mappings":"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","sourcesContent":["// import {log} from './debug';\nimport {isPlainObject} from './util';\nimport {QueryParams} from './types';\nimport {EscapeFunctions} from 'mysql';\n// import * as assert from 'assert';\n\nconst {hasOwnProperty} = Object.prototype;\n\nconst strPatt = /(['\"`])(?:\\\\.|\\1\\1|(?!\\1).)*\\1/g;\nconst objPatt = /:{1,2}[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/g;\nconst arrPatt = /\\?{1,2}/g;\n\nfunction splitQuery(str: string): [string[], string[]] {\n    let sqlFrags = [];\n    let stringLiterals = [];\n    let lastIndex = 0;\n    let match;\n\n    while ((match = strPatt.exec(str)) !== null) {\n        sqlFrags.push(str.slice(lastIndex, match.index));\n        lastIndex = match.index + match[0].length;\n        stringLiterals.push(match[0]);\n    }\n    sqlFrags.push(str.slice(lastIndex));\n    return [sqlFrags, stringLiterals];\n}\n\n\nexport default function formatSql(this: EscapeFunctions, sqlQuery: string, values: QueryParams) {\n    if (!values || (Array.isArray(values) && values.length === 0)) {\n        return sqlQuery;\n    }\n    let [sqlFrags, stringLiterals] = splitQuery(sqlQuery);\n\n    if (Array.isArray(values)) {\n        sqlFrags = sqlFrags.map(frag => {\n            let i = -1;\n            return frag.replace(arrPatt, m => {\n                if (++i >= (<any[]>values).length) {\n                    throw new Error(`Not enough placeholder values`);\n                }\n                if (m.length === 1) {\n                    return escapeValue.call(this, (<any[]>values)[i]);\n                }\n                return escapeId.call(this, (<any[]>values)[i]);\n            });\n        });\n    } else if (isPlainObject(values)) {\n        sqlFrags = sqlFrags.map(frag => frag.replace(objPatt, m => {\n            if (m.startsWith('::')) {\n                let p = m.slice(2);\n                if (!hasOwnProperty.call(values, p)) {\n                    throw new Error(`Missing placeholder id ${p}`);\n                }\n                return escapeId.call(this, values[p]);\n            }\n            let p = m.slice(1);\n            if (!hasOwnProperty.call(values, p)) {\n                throw new Error(`Missing placeholder value ${p}`);\n            }\n            return escapeValue.call(this, values[p]);\n        }));\n    } else {\n        throw new Error(`Unsupported values type`);\n    }\n\n\n    let formattedQuery = weave(sqlFrags, stringLiterals).join('');\n    // console.log(formattedQuery);\n    // console.log(`${Chalk.bold('QUERY:')} ${formattedQuery}`);\n    return formattedQuery;\n}\n\nfunction escapeId(this: EscapeFunctions, value: any): string {\n    if (isPlainObject(value)) {\n        // FIXME: not sure if this is a good idea or not... only supporting \"AND\" is probably too limited\n        let keys = Object.keys(value);\n        if (keys.length === 0) {\n            return '1';\n        }\n        // TODO: add support for \"IN\" when value[k] is an array/iterable\n        let where = keys.map(k => `${escapeId.call(this, k)}=${escapeValue.call(this, value[k])}`).join(' AND ');\n        if (keys.length > 1) {\n            return `(${where})`;\n        }\n        return where;\n    }\n    if (value instanceof Set) {\n        value = Array.from(value);\n    }\n    return this.escapeId(value);\n}\n\nfunction escapeValue(this: EscapeFunctions, value: any): string {\n    if (isPlainObject(value)) {\n        let keys = Object.keys(value);\n        if (keys.length === 0) {\n            throw new Error(`Cannot escape empty object`);\n        }\n        return keys.map(k => `${escapeId.call(this, k)}=${escapeValue.call(this, value[k])}`).join(',');\n    }\n    if (value instanceof Set) {\n        value = Array.from(value);\n    }\n    if (Array.isArray(value)) {\n        if (value.length === 0) {\n            throw new Error(`Cannot escape empty array`);\n        }\n        if (Array.isArray(value[0])) {\n            return value.map(v => `(${escapeValue.call(this, v)})`).join(',');\n        }\n        return value.map(v => escapeValue.call(this, v)).join(',');\n    }\n    if (value instanceof Date) {\n        return String(value.getTime());\n    }\n    return this.escape(value);\n}\n\nfunction weave(a: any[], b: any[]) {\n    let out = [];\n    let i = 0;\n    for (; i < b.length; ++i) {\n        out.push(a[i], b[i]);\n    }\n    out.push(a[i]);\n    return out;\n}"]}