{"version":3,"file":"ResultWrapper.js","sourceRoot":"","sources":["../src/ResultWrapper.ts"],"names":[],"mappings":";;AAEA,MAAqB,aAAa;IAG9B,YAAY,aAA4B;QACpC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,QAAQ;QAGV,IAAI,CAAC,IAAI,EAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC;QACtC,IAAG,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAC7B,IAAG,IAAI,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC/F,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,UAAU;QACZ,IAAI,CAAC,IAAI,EAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC;QACtC,IAAG,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAC7B,IAAG,IAAI,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;QACjG,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;QACrG,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,WAAW;QACb,IAAI,CAAC,IAAI,EAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC;QACtC,IAAG,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO,EAAE,CAAC;QAC3B,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;QACtG,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,UAAU;QACZ,IAAI,CAAC,IAAI,EAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC;QACtC,IAAG,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAClF,IAAG,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO,EAAE,CAAC;QAC3B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAC,GAAG,EAAE,EAAE;YAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YACzB,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC;CAGJ;AAjDD,gCAiDC","sourcesContent":["import {ResultPromise} from './types';\n\nexport default class ResultWrapper<TRecord> {\n    result: ResultPromise;\n    \n    constructor(resultPromise: ResultPromise) {\n        this.result = resultPromise;\n    }\n    \n    async fetchRow(): Promise<TRecord|null> {\n        // fetch one row and then release the connection rather than\n        // waiting for all the rows?\n        let [rows,fields] = await this.result;\n        if(!rows.length) return null;\n        if(rows.length > 1) throw new Error(\"You should only query for one row when using `fetchRow`\");\n        return rows[0];\n    }\n    \n    fetchAll(): Promise<TRecord[]> {\n        return this.result.then(([rows, fields]) => rows);\n    }\n    \n    async fetchValue<T=any>(): Promise<T|null> {\n        let [rows,fields] = await this.result;\n        if(!rows.length) return null;\n        if(rows.length > 1) throw new Error(\"You should only query for one row when using `fetchValue`\");\n        if(fields.length > 1) throw new Error(\"You should only query for one field when using `fetchValue`\");\n        return rows[0][fields[0].name];\n    }\n    \n    async fetchColumn<T=any>(): Promise<T[]> {\n        let [rows,fields] = await this.result;\n        if(!rows.length) return [];\n        if(fields.length > 1) throw new Error(\"You should only query for one field when using `fetchColumn`\");\n        const name = fields[0].name;\n        return rows.map(r => r[name]);\n    }\n    \n    async fetchPairs<T=any>(): Promise<{[_:string]:T}> {\n        let [rows,fields] = await this.result;\n        if(fields.length !== 2) throw new Error(\"`fetchPairs` expects exactly 2 columns\");\n        if(!rows.length) return {};\n        const key = fields[0].name;\n        const val = fields[1].name;\n        return rows.reduce((acc,row) => {\n            acc[row[key]] = row[val];\n            return acc;\n        }, Object.create(null));\n    }\n    \n    // [Symbol.asyncIterator]: ...\n}"]}