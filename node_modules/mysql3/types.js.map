{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import {FieldInfo} from 'mysql';\n\nexport type QueryParams = StringMap | any[];\n\nexport interface Field {\n    type: string,\n    length: number,\n    buffer: () => Buffer,\n    string: () => string,\n    geometry: () => any, // ???\n}\n\n// https://github.com/mysqljs/mysql#type-casting\ntype SqlType = number|Date|Buffer|string|boolean|null;\n\nexport interface Dict {\n    [_:string]: SqlType\n}\n\nexport interface StringMap {\n    [_: string]: any,\n}\n\nexport interface TextRow {\n    [_: string]: any,\n}\n\nexport interface AnyObject {\n    [_: string]: any,\n    [_: number]: any,\n    // [_: symbol]: any,\n}\n\nexport type QueryResult = [any[], FieldInfo[]]\n\nexport type ResultPromise = Promise<QueryResult>\n\n// https://stackoverflow.com/a/51603499/65387\nexport type TupleTypes<T> = { [P in keyof T]: T[P] } extends { [key: number]: infer V } ? V : never;\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\nexport interface ResultSetHeader {\n    fieldCount: number,\n    affectedRows: number,\n    insertId: number,\n    info: string,\n    serverStatus: number,\n    warningStatus: number,\n}"]}