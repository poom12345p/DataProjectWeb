import { AnyObject } from './types';
export declare function setDefaults<T extends AnyObject, U extends AnyObject>(obj: T, defaults: U): Spread<T, U>;
export declare function isPlainObject(obj: any): obj is AnyObject;
export declare function isObject(obj: any): obj is object;
declare type Diff<T, U> = T extends U ? never : T;
declare type OptionalPropertyNames<T> = {
    [K in keyof T]: undefined extends T[K] ? K : never;
}[keyof T];
declare type SpreadProperties<L, R, K extends keyof L & keyof R> = {
    [P in K]: L[P] | Diff<R[P], undefined>;
};
declare type Spread<L, R> = Pick<L, Diff<keyof L, keyof R>> & Pick<R, Diff<keyof R, OptionalPropertyNames<R>>> & Pick<R, Diff<OptionalPropertyNames<R>, keyof L>> & SpreadProperties<L, R, OptionalPropertyNames<R> & keyof L>;
export {};
