{"version":3,"file":"DatabaseWrapper.js","sourceRoot":"","sources":["../src/DatabaseWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport * as MySql from 'mysql2/promise';\nimport ResultWrapper from './ResultWrapper';\nimport fromEmitter from '@async-generators/from-emitter';\nimport formatSql from './formatSql';\nimport {setDefaults} from './util';\nimport {Dict, QueryParams, ResultPromise, ResultSetHeader} from './types';\nimport {GeometryType, PoolConfig} from 'mysql';\n\nexport function escapeIdString(id: string) {\n    return '`' + String(id).replace(/`/g,'``') + '`';\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n\ninterface DatabaseOptions extends Omit<PoolConfig,'typeCast'> {\n    sqlMode?: string|string[], \n    foreignKeyChecks?: boolean,\n    /**\n     * @link https://mariadb.com/kb/en/library/server-system-variables/#sql_safe_updates\n     */\n    safeUpdates?: boolean,\n    typeCast?: (field: FieldType, next: NextFunc) => void,\n    middleware?: Array<(sql: string, params: QueryParams | undefined, next: (sql: string, params?: QueryParams) => ResultPromise) => ResultPromise>,\n}\n\nexport type FieldType = {\n    // mysql2: https://github.com/sidorares/node-mysql2/blob/58c1056edd21ad42e2e755959b75f76b502e3f72/lib/constants/types.js#L5\n    // mysql1: https://github.com/mysqljs/mysql/blob/5569e02ad72789f4b396d9a901f0390fe11b5b4e/lib/protocol/constants/types.js#L9\n    // mysql2 arg: https://github.com/sidorares/node-mysql2/blob/58c1056edd21ad42e2e755959b75f76b502e3f72/lib/parsers/text_parser.js#L75\n    type: 'DECIMAL'|'TINY'|'SHORT'|'LONG'|'FLOAT'|'DOUBLE'|'NULL'|'TIMESTAMP'|'LONGLONG'|'INT24'|'DATE'|'TIME'|'DATETIME'|'YEAR'|'NEWDATE'|'VARCHAR'|'BIT'|'JSON'|'NEWDECIMAL'|'ENUM'|'SET'|'TINY_BLOB'|'MEDIUM_BLOB'|'LONG_BLOB'|'BLOB'|'VAR_STRING'|'STRING'|'GEOMETRY'\n    length: number\n    db: string\n    table: string\n    name: string\n    string(): string\n    buffer(): Buffer\n    geometry(): GeometryType\n}\n\nexport type NextFunc = () => void;\n\nexport default class DatabaseWrapper {\n    private readonly pool: any;\n    private readonly pending: Set<Promise<any>>;\n    private readonly options: DatabaseOptions;\n\n    constructor(options: DatabaseOptions) {\n        this.options = setDefaults(options, {\n            timezone: 'Z',\n            queryFormat: formatSql,\n            charset: 'utf8mb4_unicode_520_ci',\n            connectionLimit: 10,\n            typeCast: (field: FieldType, next: NextFunc) => {\n                if(field.type === 'BIT' && field.length === 1) {\n                    let buf = field.buffer();\n                    return buf[0] === 1;\n                }\n                // see https://github.com/mysqljs/mysql/blob/5569e02ad72789f4b396d9a901f0390fe11b5b4e/lib/protocol/packets/RowDataPacket.js#L53\n                return next();\n            },\n            sqlMode: [\n                'ONLY_FULL_GROUP_BY',\n                'STRICT_TRANS_TABLES',\n                'STRICT_ALL_TABLES',\n                'NO_ZERO_IN_DATE',\n                'NO_ZERO_DATE', \n                'ERROR_FOR_DIVISION_BY_ZERO',\n                // 'NO_AUTO_CREATE_USER', // not allowed in MySQL 8\n                'NO_ENGINE_SUBSTITUTION',\n                'NO_UNSIGNED_SUBTRACTION',\n                'PAD_CHAR_TO_FULL_LENGTH',\n            ],\n            middleware: [],\n        });\n        \n        let {sqlMode, foreignKeyChecks, safeUpdates, middleware, ...poolOptions} = this.options;\n\n        this.pool = MySql.createPool(poolOptions);\n        this.pending = new Set;\n        \n        if(sqlMode != null || foreignKeyChecks != null) {\n            if(Array.isArray(sqlMode)) {\n                sqlMode = sqlMode.join(',');\n            }\n            this.pool.on('connection', (conn: any) => {\n                if(sqlMode != null) {\n                    conn.query(`SET sql_mode=?`, [sqlMode]);\n                }\n                if(foreignKeyChecks != null) {\n                    conn.query(`SET foreign_key_checks=?`, [foreignKeyChecks ? 1 : 0]);\n                }\n                if(safeUpdates != null) {\n                    conn.query(`SET sql_safe_updates=?`, [safeUpdates ? 1 : 0]);\n                }\n            });\n        }\n    }\n\n    query<TRecord extends object=Dict>(sql: string, params?: QueryParams): ResultWrapper<TRecord> {\n        let mwIdx = 0;\n        const pool = this.pool;\n        const middlewareStack = this.options.middleware || [];\n\n        function next(sql: string, params?: QueryParams): ResultPromise {\n            if(middlewareStack.length > mwIdx) {\n                return middlewareStack[mwIdx++](sql, params, next);\n            }\n            return pool.query(sql, params);\n        }\n\n        const promise = next(sql, params);\n        this.pending.add(promise);\n        promise.finally(() => this.pending.delete(promise));\n        return new ResultWrapper(promise);\n    }\n\n    async exec(sql: string, params?: QueryParams): Promise<ResultSetHeader> {\n        const promise = this.pool.query(sql, params);\n        this.pending.add(promise);\n        try {\n            return (await promise)[0];\n        } finally {\n            this.pending.delete(promise);\n        }\n    }\n    \n    escape(value: any): string {\n        return this.pool.escape(value);\n    }\n    \n    escapeId(id: any): string {\n        if(Array.isArray(id)) {\n            return id.map(escapeIdString).join('.')\n        }\n        return escapeIdString(id);\n    }\n    \n    stream<T extends object=Dict>(sql: string, params?: QueryParams): AsyncIterable<T> {\n        return fromEmitter(this.pool.pool.query(sql, params),{\n            onNext: 'result',\n            onError: 'error',\n            onDone: 'end',\n        });\n    }\n    \n    async waitForPending() {\n        await Promise.all(this.pending);\n    }\n\n    close(): void {\n        return this.pool.end();\n    }\n}\n"]}